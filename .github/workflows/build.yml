name: Build Oracle Wallet with Public CA Certificates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:
  #schedule:
    # Rebuild monthly to get updated certificates
    #- cron: '0 2 1 * *'

env:
  WALLET_DIR: /tmp/public_wallet
  CERT_DIR: /tmp/certs

defaults:
  run:
    working-directory: /tmp/

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      # Using Oracle XE 18c slim - if PKI tools are missing, consider switching to:
      # image: container-registry.oracle.com/database/standard:12.2.0.1
      # or gvenzl/oracle-xe:18 (full version instead of slim)
      image: gvenzl/oracle-xe:18-slim
      options: --user root
    
    permissions:
      contents: read
      actions: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Check Oracle installation
        run: |
          echo "Checking Oracle installation..."
          echo "Oracle version:"
          sqlplus -v 2>/dev/null || echo "sqlplus not available"
          
          echo "Oracle directory structure:"
          ls -la /opt/oracle/ 2>/dev/null || echo "No /opt/oracle directory"
          
          echo "Searching for Oracle PKI tools..."
          find /opt -name "orapki" 2>/dev/null || echo "orapki not found"
          find /opt -name "*pki*" -type f 2>/dev/null | head -5 || echo "No PKI files found"
          find /opt -name "*.jar" 2>/dev/null | grep -i pki | head -5 || echo "No PKI JAR files found"
          
          echo "Available Oracle binaries:"
          ls -la /opt/oracle/product/*/bin/ 2>/dev/null | head -10 || echo "No Oracle binaries found"
        
      - name: Setup Oracle environment
        run: |
          echo "Setting up Oracle environment..."
          echo "Current user: $(whoami)"
          echo "Current PATH: $PATH"
          
          # Install Java if not present
          echo "Checking for Java..."
          if ! java -version 2>/dev/null; then
            echo "Java not found, attempting to install..."
            # Try to install OpenJDK
            if command -v yum >/dev/null 2>&1; then
              yum install -y java-11-openjdk-headless || echo "Failed to install Java via yum"
            elif command -v apt-get >/dev/null 2>&1; then
              apt-get update && apt-get install -y openjdk-11-jre-headless || echo "Failed to install Java via apt"
            elif command -v microdnf >/dev/null 2>&1; then
              microdnf install -y java-11-openjdk-headless || echo "Failed to install Java via microdnf"
            fi
          fi
          
          # Set up Java environment for Oracle
          echo "Setting up Java environment for Oracle..."
          
          # First, try to find Oracle's bundled Java (preferred for orapki)
          oracle_java_found=false
          for oracle_java_path in "/opt/oracle/product/*/jdk" "/opt/oracle/product/*/jre" "/opt/oracle/jdk" "/opt/oracle/jre" "/u01/app/oracle/product/*/jdk"; do
            if [ -d "$oracle_java_path" ] && [ -x "$oracle_java_path/bin/java" ]; then
              echo "Found Oracle Java at: $oracle_java_path"
              export JAVA_HOME="$oracle_java_path"
              export PATH="$oracle_java_path/bin:$PATH"
              oracle_java_found=true
              break
            fi
          done
          
          # If no Oracle Java found, use system Java but we'll need to set classpath later
          if [ "$oracle_java_found" = false ]; then
            echo "Oracle Java not found, using system Java..."
            for java_path in "/usr/lib/jvm/java-11-openjdk-amd64" "/usr/lib/jvm/java-8-openjdk-amd64" "/usr/java/latest" "/usr/lib/jvm/default-java" "/usr/lib/jvm/java-11-openjdk" "/usr/lib/jvm/jre-11-openjdk"; do
              if [ -d "$java_path" ] && [ -x "$java_path/bin/java" ]; then
                echo "Found system Java at: $java_path"
                export JAVA_HOME="$java_path"
                export PATH="$java_path/bin:$PATH"
                break
              fi
            done
          fi
          
          echo "JAVA_HOME: $JAVA_HOME"
          if [ -x "$JAVA_HOME/bin/java" ]; then
            echo "Java version:"
            $JAVA_HOME/bin/java -version || echo "Java version check failed"
          else
            echo "Searching for Java..."
            ls -la /usr/lib/jvm/*/bin/java 2>/dev/null || true
            ls -la /opt/*/jdk*/bin/java 2>/dev/null || true
            ls -la /usr/bin/java 2>/dev/null || true
            
            # Try to use system java if JAVA_HOME setup failed
            if command -v java >/dev/null 2>&1; then
              echo "Using system java"
              java -version
              export JAVA_HOME=$(dirname $(dirname $(readlink -f $(command -v java))))
              echo "Detected JAVA_HOME: $JAVA_HOME"
            fi
          fi
          
          # Set Oracle environment variables
          export ORACLE_HOME=/opt/oracle/product/18c/dbhomeXE
          export PATH=$ORACLE_HOME/bin:$JAVA_HOME/bin:$PATH
          export TNS_ADMIN=$ORACLE_HOME/network/admin
          
          # Try different potential Oracle locations
          for oracle_path in "/opt/oracle/product/18c/dbhomeXE" "/u01/app/oracle/product/18.0.0/dbhome_1" "/opt/oracle"; do
            if [ -d "$oracle_path" ]; then
              echo "Found Oracle installation at: $oracle_path"
              export ORACLE_HOME="$oracle_path"
              export PATH="$oracle_path/bin:$JAVA_HOME/bin:$PATH"
              break
            fi
          done
          
          echo "ORACLE_HOME: $ORACLE_HOME"
          echo "PATH: $PATH"
          echo "JAVA_HOME: $JAVA_HOME"
          
          # Set up Oracle classpath for orapki
          echo "Setting up Oracle classpath..."
          export CLASSPATH=""
          if [ -d "$ORACLE_HOME" ]; then
            echo "Searching for Oracle JAR files in $ORACLE_HOME..."
            echo "Oracle directory structure:"
            ls -la "$ORACLE_HOME/" 2>/dev/null || true
            
            # Find Oracle JAR files needed for orapki (broader search)
            oracle_jars=""
            
            # Search in common Oracle JAR locations
            for jar_dir in "$ORACLE_HOME/jlib" "$ORACLE_HOME/lib" "$ORACLE_HOME/jdbc/lib" "$ORACLE_HOME/rdbms/jlib" "$ORACLE_HOME/oui/jlib" "$ORACLE_HOME"; do
              if [ -d "$jar_dir" ]; then
                echo "Searching in directory: $jar_dir"
                ls -la "$jar_dir"/*.jar 2>/dev/null | head -5 || echo "No JARs found in $jar_dir"
                
                # Look for specific Oracle PKI JARs
                for jar_pattern in "orapki.jar" "ojpse.jar" "osdt_core.jar" "osdt_cert.jar" "jcmFIPS.jar" "oraclepki.jar" "oracle-pki.jar"; do
                  jar_file=$(find "$jar_dir" -name "$jar_pattern" 2>/dev/null | head -1)
                  if [ -n "$jar_file" ]; then
                    echo "Found Oracle JAR: $jar_file"
                    if [ -z "$oracle_jars" ]; then
                      oracle_jars="$jar_file"
                    else
                      oracle_jars="$oracle_jars:$jar_file"
                    fi
                  fi
                done
              fi
            done
            
            # If specific JARs not found, try to include all JARs from jlib
            if [ -z "$oracle_jars" ]; then
              echo "Specific Oracle JARs not found, including all available JARs..."
              for jar_dir in "$ORACLE_HOME/jlib" "$ORACLE_HOME/lib"; do
                if [ -d "$jar_dir" ]; then
                  for jar_file in "$jar_dir"/*.jar; do
                    if [ -f "$jar_file" ]; then
                      echo "Including JAR: $jar_file"
                      if [ -z "$oracle_jars" ]; then
                        oracle_jars="$jar_file"
                      else
                        oracle_jars="$oracle_jars:$jar_file"
                      fi
                    fi
                  done
                fi
              done
            fi
            
            if [ -n "$oracle_jars" ]; then
              export CLASSPATH="$oracle_jars"
              echo "Set CLASSPATH: $CLASSPATH"
            else
              echo "WARNING: No Oracle JAR files found!"
              echo "Available files in ORACLE_HOME:"
              find "$ORACLE_HOME" -name "*.jar" 2>/dev/null | head -20 || echo "No JAR files found"
              echo "Will attempt to run orapki with Oracle's built-in classpath..."
            fi
          fi
          
          # Check for orapki
          if [ -x "$ORACLE_HOME/bin/orapki" ]; then
            echo "Found orapki at: $ORACLE_HOME/bin/orapki"
            echo "Checking orapki script contents..."
            head -20 "$ORACLE_HOME/bin/orapki" 2>/dev/null || echo "Cannot read orapki script"
            
            # Test orapki with Oracle's environment
            echo "Testing orapki with Oracle environment..."
            cd "$ORACLE_HOME/bin" && ./orapki help 2>&1 | head -5 || echo "orapki help failed"
          else
            echo "Searching for orapki..."
            for search_path in "/opt" "/u01" "/usr" "/"; do
              echo "Searching in $search_path..."
              ls -la $search_path/*/bin/orapki 2>/dev/null || true
              ls -la $search_path/*/*/bin/orapki 2>/dev/null || true
              ls -la $search_path/*/*/*/bin/orapki 2>/dev/null || true
            done
          fi
          
          # Verify all required tools are available
          echo "Verifying required tools..."
          
          # Check Java
          if command -v java >/dev/null 2>&1; then
            echo "✓ Java found: $(java -version 2>&1 | head -1)"
          else
            echo "✗ Java not found in PATH"
            echo "Current PATH: $PATH"
            echo "JAVA_HOME: $JAVA_HOME"
            exit 1
          fi
          
          # Check orapki
          if command -v orapki >/dev/null 2>&1; then
            echo "✓ orapki found: $(command -v orapki)"
          elif [ -x "$ORACLE_HOME/bin/orapki" ]; then
            echo "✓ orapki found at: $ORACLE_HOME/bin/orapki"
          else
            echo "✗ orapki not found"
            echo "Current PATH: $PATH"
            echo "ORACLE_HOME: $ORACLE_HOME"
            exit 1
          fi
          
          # Save environment for subsequent steps
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          echo "ORACLE_HOME=$ORACLE_HOME" >> $GITHUB_ENV
          echo "PATH=$ORACLE_HOME/bin:$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV
          echo "TNS_ADMIN=$ORACLE_HOME/network/admin" >> $GITHUB_ENV
          echo "CLASSPATH=$CLASSPATH" >> $GITHUB_ENV
          
      - name: Setup working directories
        run: |
          echo "Setting up working directories..."
          echo "Current umask: $(umask)"
          
          umask 022
          mkdir -p ${{ env.WALLET_DIR }} ${{ env.CERT_DIR }}
          chmod 755 ${{ env.WALLET_DIR }} ${{ env.CERT_DIR }}
          ls -la /tmp/
          
      - name: Create new Oracle wallet
        run: |
          echo "Creating Oracle wallet at ${{ env.WALLET_DIR }}"
          echo "Oracle environment:"
          echo "ORACLE_HOME: $ORACLE_HOME"
          echo "JAVA_HOME: $JAVA_HOME"
          echo "PATH: $PATH"
          echo "TNS_ADMIN: $TNS_ADMIN"
          echo "CLASSPATH: $CLASSPATH"
          
          # Initialize variables
          orapki_working=false
          use_java_direct=false
          use_mkstore=false
          use_owm=false
          
          # Verify Java is available
          if [ -x "$JAVA_HOME/bin/java" ]; then
            echo "Java version:"
            $JAVA_HOME/bin/java -version
          else
            echo "ERROR: Java not found at $JAVA_HOME/bin/java"
            echo "Searching for Java..."
            ls -la /usr/bin/java /usr/lib/jvm/*/bin/java 2>/dev/null || true
            exit 1
          fi
          
          # Check if orapki is available and working
          if command -v orapki >/dev/null 2>&1; then
            echo "orapki found in PATH"
            # Test orapki with proper environment - run from Oracle bin directory
            echo "Testing orapki from Oracle bin directory..."
            if (cd "$ORACLE_HOME/bin" && CLASSPATH="$CLASSPATH" ./orapki help) >/dev/null 2>&1; then
              echo "✅ orapki is working correctly from Oracle bin directory"
              orapki_working=true
            else
              echo "❌ orapki found but not working from bin directory"
              echo "Error output:"
              (cd "$ORACLE_HOME/bin" && CLASSPATH="$CLASSPATH" ./orapki help) 2>&1 | head -5 || true
              orapki_working=false
            fi
          elif [ -x "$ORACLE_HOME/bin/orapki" ]; then
            echo "Using orapki from ORACLE_HOME: $ORACLE_HOME/bin/orapki"
            # Test orapki from its own directory
            echo "Testing orapki from its own directory..."
            if (cd "$ORACLE_HOME/bin" && ./orapki help) >/dev/null 2>&1; then
              echo "✅ orapki is working correctly from its directory"
              orapki_working=true
            else
              echo "❌ orapki found but not working"
              echo "Error output:"
              (cd "$ORACLE_HOME/bin" && ./orapki help) 2>&1 | head -5 || true
              orapki_working=false
            fi
          else
            echo "ERROR: orapki not found"
            echo "Searching for Oracle binaries..."
            ls -la /opt/oracle/*/bin/orapki 2>/dev/null || true
            ls -la /u01/*/oracle/*/bin/orapki 2>/dev/null || true
            exit 1
          fi
          
          # If orapki is not working, try alternative approaches
          if [ "$orapki_working" = false ]; then
            echo "Trying alternative approaches..."
            
            # Try to run orapki directly with Java if we have classpath
            if [ -n "$CLASSPATH" ]; then
              echo "Attempting to run orapki with explicit classpath..."
              echo "CLASSPATH: $CLASSPATH"
              if java -cp "$CLASSPATH" oracle.security.pki.textui.OraclePKITextUI help >/dev/null 2>&1; then
                echo "✅ Direct Java execution of orapki is working"
                orapki_working=true
                use_java_direct=true
              else
                echo "❌ Direct Java execution also failed"
                echo "Error output:"
                java -cp "$CLASSPATH" oracle.security.pki.textui.OraclePKITextUI help 2>&1 | head -5 || true
              fi
            else
              echo "❌ No CLASSPATH available for direct Java execution"
            fi
            
            # If still not working, try to find and install Oracle wallet manager
            if [ "$orapki_working" = false ]; then
              echo "Attempting alternative Oracle wallet approaches..."
              
              # Check if Oracle has a different wallet utility
              wallet_tool_found=""
              echo "Searching for alternative Oracle wallet tools..."
              
              # Check common wallet tools in PATH
              for wallet_tool in "mkstore" "owm" "oracle_wallet_manager" "walletcli"; do
                if command -v "$wallet_tool" >/dev/null 2>&1; then
                  echo "Found alternative wallet tool in PATH: $wallet_tool"
                  wallet_tool_found="$wallet_tool"
                  break
                fi
              done
              
              # If not found in PATH, search in Oracle directories
              if [ -z "$wallet_tool_found" ] && [ -d "$ORACLE_HOME" ]; then
                echo "Searching for wallet tools in Oracle directories..."
                for tool_name in "mkstore" "owm"; do
                  tool_path=$(find "$ORACLE_HOME" -name "$tool_name" -type f -executable 2>/dev/null | head -1)
                  if [ -n "$tool_path" ]; then
                    echo "Found wallet tool: $tool_path"
                    wallet_tool_found="$tool_name"
                    # Add to PATH for subsequent use
                    export PATH="$(dirname "$tool_path"):$PATH"
                    break
                  fi
                done
              fi
              
              if [ -n "$wallet_tool_found" ]; then
                echo "✅ Will use $wallet_tool_found for wallet management"
                echo "Tool location: $(command -v "$wallet_tool_found")"
                echo "Tool version/help:"
                "$wallet_tool_found" -help 2>&1 | head -5 || "$wallet_tool_found" --help 2>&1 | head -5 || echo "No help available"
                
                # Test the alternative tool
                case "$wallet_tool_found" in
                  "mkstore")
                    echo "Testing mkstore..."
                    # mkstore requires a password, use a temporary one for testing
                    # Create a temporary wallet to test mkstore functionality
                    if echo "testpass123" | mkstore -wrl /tmp/test_wallet -create >/dev/null 2>&1; then
                      echo "✅ mkstore is working"
                      rm -rf /tmp/test_wallet 2>/dev/null || true
                      orapki_working=true
                      use_mkstore=true
                    else
                      echo "❌ mkstore test failed, trying without password input..."
                      # Try alternative mkstore syntax
                      if mkstore -wrl /tmp/test_wallet -create -nologo >/dev/null 2>&1; then
                        echo "✅ mkstore is working (alternative syntax)"
                        rm -rf /tmp/test_wallet 2>/dev/null || true
                        orapki_working=true
                        use_mkstore=true
                      else
                        echo "❌ mkstore test failed with both methods"
                        echo "Testing mkstore version and available commands..."
                        echo "Command: mkstore -help"
                        mkstore -help 2>&1 | head -10 || echo "Cannot get mkstore help"
                        echo "Command: mkstore (no args)"
                        mkstore 2>&1 | head -5 || echo "Cannot run mkstore without args"
                        echo "Available Oracle binaries in bin directory:"
                        ls -la "$ORACLE_HOME/bin/" | grep -E "(mkstore|owm|orapki|wallet)" || echo "No wallet tools found"
                      fi
                    fi
                    ;;
                  "owm")
                    echo "Testing owm..."
                    echo "OWM location: $(command -v owm 2>/dev/null || echo 'not in PATH')"
                    
                    # owm might need different parameters, try basic help
                    if owm -help >/dev/null 2>&1; then
                      echo "✅ owm is available (-help works)"
                      orapki_working=true
                      use_owm=true
                    elif owm --help >/dev/null 2>&1; then
                      echo "✅ owm is available (--help works)"
                      orapki_working=true
                      use_owm=true
                    elif owm >/dev/null 2>&1; then
                      echo "✅ owm is available (basic command works)"
                      orapki_working=true
                      use_owm=true
                    else
                      echo "❌ owm test failed"
                      echo "Testing owm with different approaches..."
                      echo "Command: owm -version"
                      owm -version 2>&1 | head -3 || echo "Cannot get owm version"
                      echo "Command: owm (no args)"
                      owm 2>&1 | head -5 || echo "Cannot run owm without args"
                    fi
                    ;;
                esac
              fi
              
              if [ "$orapki_working" = false ]; then
                echo "❌ No working Oracle wallet tool found"
                echo ""
                echo "DEBUGGING INFORMATION:"
                echo "Oracle Home: $ORACLE_HOME"
                echo "Available Oracle binaries:"
                ls -la "$ORACLE_HOME/bin/" | grep -E "(orapki|mkstore|owm)" || echo "No wallet binaries found"
                echo ""
                echo "Testing available wallet tools manually:"
                
                # Test each tool individually with maximum verbosity
                for test_tool in orapki mkstore owm; do
                  echo "=== Testing $test_tool ==="
                  if command -v "$test_tool" >/dev/null 2>&1; then
                    tool_path=$(command -v "$test_tool")
                    echo "Location: $tool_path"
                    echo "Permissions: $(ls -la "$tool_path")"
                    echo "Running: $test_tool (no args)"
                    "$test_tool" 2>&1 | head -10 || echo "Failed to run $test_tool"
                    echo "Running: $test_tool -help"
                    "$test_tool" -help 2>&1 | head -10 || echo "No -help for $test_tool"
                  else
                    echo "$test_tool not found in PATH"
                  fi
                  echo ""
                done
                
                echo "Oracle installation analysis:"
                echo "ORACLE_HOME contents:"
                ls -la "$ORACLE_HOME/" 2>/dev/null | head -10 || echo "Cannot list ORACLE_HOME"
                echo ""
                echo "Oracle version info:"
                "$ORACLE_HOME/bin/sqlplus" -v 2>/dev/null || echo "Cannot get Oracle version"
                echo ""
                echo "Available Oracle files related to PKI/wallet:"
                find "$ORACLE_HOME" -name "*pki*" -o -name "*wallet*" -o -name "*crypto*" 2>/dev/null | head -15 || true
                echo ""
                
                # Try installing additional Oracle packages that might contain tools
                echo "Attempting to install missing Oracle PKI components..."
                if command -v yum >/dev/null 2>&1; then
                  echo "Available Oracle packages:"
                  yum list available 2>/dev/null | grep -i oracle | grep -E "(pki|wallet|crypto)" || echo "No Oracle PKI packages available"
                  # Try installing if any packages are available
                  yum install -y oracle-instantclient*-tools* 2>/dev/null || echo "No additional Oracle packages could be installed"
                fi
                
                echo ""
                echo "❌ FINAL RESULT: Cannot get any Oracle wallet tool to work"
                echo "This is likely due to Oracle XE container limitations"
                echo "Oracle XE may not include the PKI utilities required for wallet management"
                echo ""
                echo "WORKAROUND OPTIONS:"
                echo "1. Use Oracle Standard/Enterprise Edition instead of XE"
                echo "2. Use a different container image with full Oracle client tools"
                echo "3. Install Oracle Instant Client with PKI tools"
                echo "4. Create wallets manually using a full Oracle installation"
                echo "5. Use alternative SSL/TLS certificate management approaches"
                exit 1
              fi
            fi
          fi
          
          # Create wallet using the working approach
          echo "Creating wallet..."
          
          if [ "$use_java_direct" = true ]; then
            # Use direct Java execution
            orapki_cmd="java -cp \"$CLASSPATH\" oracle.security.pki.textui.OraclePKITextUI"
            echo "Using direct Java execution: $orapki_cmd"
            
            if eval $orapki_cmd wallet create -wallet ${{ env.WALLET_DIR }} -auto_login_only; then
              echo "Wallet created successfully with direct Java"
              ls -la ${{ env.WALLET_DIR }}
              echo "ORAPKI_CMD=$orapki_cmd" >> $GITHUB_ENV
            else
              echo "ERROR: Failed to create wallet with direct Java execution"
              exit 1
            fi
          elif [ "$use_mkstore" = true ]; then
            # Use mkstore for wallet creation
            echo "Using mkstore for wallet creation"
            
            # mkstore requires a password for wallet creation
            # For auto-login wallets, we can use a temporary password
            wallet_password="TempWalletPass123"
            
            # mkstore syntax: mkstore -wrl <wallet_location> -create
            # Create the wallet with password first
            if echo "$wallet_password" | mkstore -wrl ${{ env.WALLET_DIR }} -create; then
              echo "Wallet created successfully with mkstore"
              
              # For auto-login functionality, create auto-login file
              if echo "$wallet_password" | mkstore -wrl ${{ env.WALLET_DIR }} -createSSO; then
                echo "Auto-login wallet created successfully"
              else
                echo "WARNING: Could not create auto-login wallet, but basic wallet exists"
              fi
              
              ls -la ${{ env.WALLET_DIR }}
              # Save mkstore command for subsequent steps (include password handling)
              echo "WALLET_PASSWORD=$wallet_password" >> $GITHUB_ENV
              echo "ORAPKI_CMD=echo \"\$WALLET_PASSWORD\" | mkstore -wrl" >> $GITHUB_ENV
              echo "WALLET_TOOL=mkstore" >> $GITHUB_ENV
            else
              echo "ERROR: Failed to create wallet with mkstore"
              echo "Trying alternative mkstore approaches..."
              
              # Try without password input (some mkstore versions may work differently)
              if mkstore -wrl ${{ env.WALLET_DIR }} -create -nologo; then
                echo "Wallet created successfully with mkstore (no password)"
                ls -la ${{ env.WALLET_DIR }}
                echo "ORAPKI_CMD=mkstore -wrl" >> $GITHUB_ENV
                echo "WALLET_TOOL=mkstore" >> $GITHUB_ENV
              else
                echo "ERROR: All mkstore wallet creation attempts failed"
                exit 1
              fi
            fi
          elif [ "$use_owm" = true ]; then
            # Use Oracle Wallet Manager
            echo "Using Oracle Wallet Manager (owm) for wallet creation"
            
            # Create wallet directory first
            mkdir -p ${{ env.WALLET_DIR }}
            
            # owm might have different syntax, try common patterns
            if owm -createWallet ${{ env.WALLET_DIR }} || owm create ${{ env.WALLET_DIR }}; then
              echo "Wallet created successfully with owm"
              ls -la ${{ env.WALLET_DIR }}
              echo "ORAPKI_CMD=owm" >> $GITHUB_ENV
              echo "WALLET_TOOL=owm" >> $GITHUB_ENV
            else
              echo "ERROR: Failed to create wallet with owm"
              exit 1
            fi
          else
            # Use orapki from its directory
            echo "Using orapki from Oracle bin directory"
            
            if (cd "$ORACLE_HOME/bin" && ./orapki wallet create -wallet ${{ env.WALLET_DIR }} -auto_login_only); then
              echo "Wallet created successfully with orapki"
              ls -la ${{ env.WALLET_DIR }}
              # Save command that works from the bin directory
              echo "ORAPKI_CMD=cd \"$ORACLE_HOME/bin\" && ./orapki" >> $GITHUB_ENV
              echo "WALLET_TOOL=orapki" >> $GITHUB_ENV
            else
              echo "ERROR: Failed to create wallet with orapki"
              echo "Trying fallback approaches..."
              
              # Try with explicit environment
              if (cd "$ORACLE_HOME/bin" && ORACLE_HOME="$ORACLE_HOME" LD_LIBRARY_PATH="$ORACLE_HOME/lib:$LD_LIBRARY_PATH" ./orapki wallet create -wallet ${{ env.WALLET_DIR }} -auto_login_only); then
                echo "Wallet created successfully with enhanced environment"
                ls -la ${{ env.WALLET_DIR }}
                echo "ORAPKI_CMD=cd \"$ORACLE_HOME/bin\" && ORACLE_HOME=\"$ORACLE_HOME\" LD_LIBRARY_PATH=\"$ORACLE_HOME/lib:\$LD_LIBRARY_PATH\" ./orapki" >> $GITHUB_ENV
                echo "WALLET_TOOL=orapki" >> $GITHUB_ENV
              else
                echo "ERROR: All wallet creation attempts failed"
                exit 1
              fi
            fi
          fi
          
      - name: Download certificate bundles
        run: |
          echo "Downloading Amazon RDS global bundle..."
          if curl -fsSL https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem -o ${{ env.CERT_DIR }}/amazon-global-bundle.pem; then
            echo "✅ Amazon global bundle downloaded"
          else
            echo "❌ Failed to download Amazon global bundle"
            exit 1
          fi
          
          echo "Downloading Amazon RDS regional bundles..."
          curl -fsSL https://truststore.pki.rds.amazonaws.com/us-east-1/us-east-1-bundle.pem -o ${{ env.CERT_DIR }}/amazon-us-east-1-bundle.pem || echo "⚠️ Failed to download us-east-1 bundle"
          curl -fsSL https://truststore.pki.rds.amazonaws.com/us-west-2/us-west-2-bundle.pem -o ${{ env.CERT_DIR }}/amazon-us-west-2-bundle.pem || echo "⚠️ Failed to download us-west-2 bundle"
          curl -fsSL https://truststore.pki.rds.amazonaws.com/eu-west-1/eu-west-1-bundle.pem -o ${{ env.CERT_DIR }}/amazon-eu-west-1-bundle.pem || echo "⚠️ Failed to download eu-west-1 bundle"
          
          echo "Copying Mozilla CA bundle..."
          if [ -f "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" ]; then
            cp /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem ${{ env.CERT_DIR }}/mozilla-ca-bundle.pem
            echo "✅ Mozilla CA bundle copied"
          elif [ -f "/etc/ssl/certs/ca-certificates.crt" ]; then
            cp /etc/ssl/certs/ca-certificates.crt ${{ env.CERT_DIR }}/mozilla-ca-bundle.pem
            echo "✅ CA certificates copied from /etc/ssl/certs/"
          elif [ -f "/etc/ssl/certs/ca-bundle.crt" ]; then
            cp /etc/ssl/certs/ca-bundle.crt ${{ env.CERT_DIR }}/mozilla-ca-bundle.pem
            echo "✅ CA certificates copied from /etc/ssl/certs/ca-bundle.crt"
          else
            echo "❌ No CA bundle found at expected locations"
            echo "Searching for CA bundles..."
            ls /etc/ssl/certs/ 2>/dev/null | head -10 || echo "Cannot list /etc/ssl/certs/"
            ls /etc/pki/ 2>/dev/null | head -10 || echo "Cannot list /etc/pki/"
            exit 1
          fi
          
          echo "Downloaded certificate bundles:"
          ls -la ${{ env.CERT_DIR }}
          echo "File sizes:"
          ls -lh ${{ env.CERT_DIR }}/* || echo "Cannot show file sizes"
          
      - name: Validate certificate bundles
        run: |
          echo "Validating certificate bundles..."
          for bundle in ${{ env.CERT_DIR }}/*.pem; do
            echo "Validating $(basename $bundle)..."
            if ! grep -q "BEGIN CERTIFICATE" "$bundle"; then
              echo "ERROR: No certificates found in $bundle"
              exit 1
            fi
            cert_count=$(grep -c "BEGIN CERTIFICATE" "$bundle")
            echo "  Found $cert_count certificates"
          done
          
      - name: Process Amazon global bundle certificates
        run: |
          echo "Processing Amazon global bundle..."
          cd ${{ env.CERT_DIR }}
          
          if [ ! -f "amazon-global-bundle.pem" ]; then
            echo "ERROR: Amazon global bundle not found"
            exit 1
          fi
          
          # Split certificates with error handling
          if csplit amazon-global-bundle.pem '/-----BEGIN CERTIFICATE-----/' '{*}' --prefix=amazon-global- --suffix-format='%03d.pem' --quiet; then
            echo "Successfully split Amazon global bundle"
          else
            echo "ERROR: Failed to split Amazon global bundle"
            echo "Bundle content preview:"
            head -10 amazon-global-bundle.pem
            exit 1
          fi
          
          rm amazon-global-000.pem 2>/dev/null || true
          
          # Function to add certificate based on available tool
          add_certificate() {
            local cert_file="$1"
            local wallet_dir="$2"
            
            case "${WALLET_TOOL:-orapki}" in
              "mkstore")
                # mkstore syntax: mkstore -wrl <wallet_location> -importcert -cert <cert_file>
                # mkstore may require password even for trusted cert import
                if [ -n "${WALLET_PASSWORD:-}" ]; then
                  echo "$WALLET_PASSWORD" | mkstore -wrl "$wallet_dir" -importcert -cert "$cert_file"
                else
                  mkstore -wrl "$wallet_dir" -importcert -cert "$cert_file"
                fi
                ;;
              "owm")
                # owm syntax may vary, try common patterns
                owm -importTrustedCert "$wallet_dir" "$cert_file" || owm import "$wallet_dir" "$cert_file"
                ;;
              *)
                # Default orapki syntax
                eval $ORAPKI_CMD wallet add -wallet "$wallet_dir" -trusted_cert -cert "$cert_file" -auto_login_only
                ;;
            esac
          }
          
          cert_count=0
          failed_count=0
          duplicate_count=0
          for cert in amazon-global-*.pem; do
            if [ -f "$cert" ] && [ -s "$cert" ]; then
              echo "Adding Amazon global certificate: $cert"
              # Capture output to check for specific errors
              if cert_output=$(add_certificate "$cert" "${{ env.WALLET_DIR }}" 2>&1); then
                cert_count=$((cert_count + 1))
                echo "✅ Successfully added certificate $cert"
              else
                if echo "$cert_output" | grep -q "PKI-04003.*already present\|already exists\|duplicate"; then
                  duplicate_count=$((duplicate_count + 1))
                  echo "ℹ️ Certificate $cert already exists (skipping)"
                else
                  failed_count=$((failed_count + 1))
                  echo "⚠️ WARNING: Failed to add certificate $cert"
                  echo "Error: $cert_output"
                fi
              fi
            fi
          done
          echo "Successfully added $cert_count new Amazon global certificates"
          if [ $duplicate_count -gt 0 ]; then
            echo "Skipped $duplicate_count duplicate certificates"
          fi
          if [ $failed_count -gt 0 ]; then
            echo "Failed to add $failed_count certificates"
          fi
          rm amazon-global-*.pem
          
          # Ensure we have at least some certificates (counting new + duplicates as success)
          total_processed=$((cert_count + duplicate_count))
          if [ $total_processed -eq 0 ]; then
            echo "ERROR: No Amazon global certificates were processed successfully"
            exit 1
          fi
          
      - name: Process Amazon regional bundle certificates
        continue-on-error: true
        run: |
          echo "Processing Amazon regional bundles..."
          cd ${{ env.CERT_DIR }}
          
          total_regional_certs=0
          for bundle in amazon-us-east-1-bundle.pem amazon-us-west-2-bundle.pem amazon-eu-west-1-bundle.pem; do
            if [ -f "$bundle" ]; then
              region=$(echo $bundle | sed 's/amazon-\(.*\)-bundle.pem/\1/')
              echo "Processing $region certificates..."
              
              # Check if bundle has certificates
              if ! grep -q "BEGIN CERTIFICATE" "$bundle"; then
                echo "WARNING: No certificates found in $bundle, skipping"
                continue
              fi
              
              if csplit "$bundle" '/-----BEGIN CERTIFICATE-----/' '{*}' --prefix="amazon-${region}-" --suffix-format='%03d.pem' --quiet; then
                rm "amazon-${region}-000.pem" 2>/dev/null || true
                
                cert_count=0
                for cert in amazon-${region}-*.pem; do
                  if [ -f "$cert" ] && [ -s "$cert" ]; then
                    if add_certificate "$cert" "${{ env.WALLET_DIR }}" >/dev/null 2>&1; then
                      cert_count=$((cert_count + 1))
                    fi
                  fi
                done
                echo "Successfully added $cert_count certificates from $region"
                total_regional_certs=$((total_regional_certs + cert_count))
                rm amazon-${region}-*.pem 2>/dev/null || true
              else
                echo "WARNING: Failed to split $bundle"
              fi
            else
              echo "WARNING: Bundle $bundle not found, skipping"
            fi
          done
          echo "Total regional certificates added: $total_regional_certs"
          
      - name: Process Mozilla CA bundle certificates
        run: |
          echo "Processing Mozilla CA bundle..."
          cd ${{ env.CERT_DIR }}
          
          if [ ! -f "mozilla-ca-bundle.pem" ]; then
            echo "ERROR: Mozilla CA bundle not found"
            exit 1
          fi
          
          # Check bundle content first
          cert_count_in_bundle=$(grep -c "BEGIN CERTIFICATE" mozilla-ca-bundle.pem)
          echo "Found $cert_count_in_bundle certificates in Mozilla bundle"
          
          # Split certificates with error handling
          if csplit mozilla-ca-bundle.pem '/-----BEGIN CERTIFICATE-----/' '{*}' --prefix=mozilla- --suffix-format='%03d.pem' --quiet; then
            echo "Successfully split Mozilla CA bundle"
          else
            echo "ERROR: Failed to split Mozilla CA bundle"
            echo "Bundle content preview:"
            head -10 mozilla-ca-bundle.pem
            exit 1
          fi
          
          rm mozilla-000.pem 2>/dev/null || true
          
          cert_count=0
          failed_count=0
          duplicate_count=0
          for cert in mozilla-*.pem; do
            if [ -f "$cert" ] && [ -s "$cert" ]; then
              # Capture output to check for specific errors
              if cert_output=$(add_certificate "$cert" "${{ env.WALLET_DIR }}" 2>&1); then
                cert_count=$((cert_count + 1))
                # Show progress every 50 certificates
                if [ $((cert_count % 50)) -eq 0 ]; then
                  echo "Added $cert_count Mozilla certificates so far..."
                fi
              else
                if echo "$cert_output" | grep -q "PKI-04003.*already present\|already exists\|duplicate"; then
                  duplicate_count=$((duplicate_count + 1))
                else
                  failed_count=$((failed_count + 1))
                fi
              fi
            fi
          done
          echo "Successfully added $cert_count new Mozilla CA certificates"
          if [ $duplicate_count -gt 0 ]; then
            echo "Skipped $duplicate_count duplicate certificates"
          fi
          if [ $failed_count -gt 0 ]; then
            echo "Failed to add $failed_count certificates"
          fi
          rm mozilla-*.pem
          
          # Ensure we have at least some certificates (counting new + duplicates as success)
          total_processed=$((cert_count + duplicate_count))
          if [ $total_processed -eq 0 ]; then
            echo "ERROR: No Mozilla CA certificates were processed successfully"
            exit 1
          fi
          
      - name: Validate wallet contents
        run: |
          echo "Validating wallet contents..."
          if [ ! -f "${{ env.WALLET_DIR }}/cwallet.sso" ]; then
            echo "ERROR: cwallet.sso not found"
            echo "Wallet directory contents:"
            ls -la ${{ env.WALLET_DIR }}
            exit 1
          fi
          
          echo "Wallet files:"
          ls -la ${{ env.WALLET_DIR }}
          
          echo "Listing trusted certificates in wallet..."
          
          # Function to display wallet contents based on available tool
          display_wallet() {
            local wallet_dir="$1"
            
            case "${WALLET_TOOL:-orapki}" in
              "mkstore")
                # mkstore syntax: mkstore -wrl <wallet_location> -list
                # Try with password first, then without
                if [ -n "${WALLET_PASSWORD:-}" ]; then
                  echo "$WALLET_PASSWORD" | mkstore -wrl "$wallet_dir" -list 2>/dev/null || mkstore -wrl "$wallet_dir" -list
                else
                  mkstore -wrl "$wallet_dir" -list
                fi
                ;;
              "owm")
                # owm might have different syntax for listing
                owm -listCerts "$wallet_dir" || owm list "$wallet_dir" || echo "owm list not supported"
                ;;
              *)
                # Default orapki syntax
                eval $ORAPKI_CMD wallet display -wallet "$wallet_dir"
                ;;
            esac
          }
          
          if wallet_display=$(display_wallet "${{ env.WALLET_DIR }}" 2>&1); then
            echo "$wallet_display" | head -20
            
            # Count certificates (different tools may have different output formats)
            case "${WALLET_TOOL:-orapki}" in
              "mkstore")
                cert_count=$(echo "$wallet_display" | grep -c "Certificate" || echo "0")
                ;;
              "owm")
                cert_count=$(echo "$wallet_display" | grep -c -i "certificate\|cert" || echo "0")
                ;;
              *)
                cert_count=$(echo "$wallet_display" | grep -c "Trusted Certificate" || echo "0")
                ;;
            esac
            
            echo "Total trusted certificates in wallet: $cert_count"
            
            if [ "$cert_count" -lt 50 ]; then
              echo "WARNING: Expected more certificates (found $cert_count)"
              echo "This may indicate certificate processing issues"
            elif [ "$cert_count" -lt 100 ]; then
              echo "INFO: Found $cert_count certificates (acceptable but below expected ~150+)"
            else
              echo "SUCCESS: Found $cert_count certificates"
            fi
          else
            echo "ERROR: Could not display wallet contents"
            echo "Wallet display output: $wallet_display"
            
            # Try alternative validation - check if wallet files exist
            echo "Checking wallet files directly..."
            ls -la ${{ env.WALLET_DIR }}
            if [ -f "${{ env.WALLET_DIR }}/cwallet.sso" ] || [ -f "${{ env.WALLET_DIR }}/ewallet.p12" ]; then
              echo "INFO: Wallet files found, proceeding despite display issues"
            else
              exit 1
            fi
          fi
          
      - name: Create wallet metadata
        run: |
          # Set proper permissions before creating metadata
          chmod 644 ${{ env.WALLET_DIR }}/*.sso ${{ env.WALLET_DIR }}/*.p12 2>/dev/null || true
          
          cat > ${{ env.WALLET_DIR }}/wallet-info.txt << EOF
          Oracle Wallet Build Information
          ===============================
          Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Build ID: ${{ github.run_id }}
          Git SHA: ${{ github.sha }}
          Wallet Tool Used: ${WALLET_TOOL:-orapki}
          
          Certificate Sources:
          - Amazon RDS Global Bundle
          - Amazon RDS Regional Bundles (us-east-1, us-west-2, eu-west-1)
          - Mozilla CA Bundle
          
          Total Certificates: $(display_wallet "${{ env.WALLET_DIR }}" 2>/dev/null | grep -c -i "certificate\|cert" || echo "Unable to count")
          
          Usage:
          Copy the contents of this directory to your Oracle client configuration.
          Update your sqlnet.ora file to point to the wallet location.
          
          Compatible with Oracle 12c and later versions.
          EOF
          
          chmod 644 ${{ env.WALLET_DIR }}/wallet-info.txt
          echo "Wallet metadata created:"
          cat ${{ env.WALLET_DIR }}/wallet-info.txt
          
      - name: Prepare wallet for upload
        run: |
          echo "Setting final permissions for wallet files..."
          # Use basic commands instead of find (which may not be available)
          chmod 644 ${{ env.WALLET_DIR }}/* 2>/dev/null || true
          chmod 755 ${{ env.WALLET_DIR }} 2>/dev/null || true
          
          # Alternative approach using ls and xargs if available
          if command -v ls >/dev/null 2>&1; then
            for file in ${{ env.WALLET_DIR }}/*; do
              if [ -f "$file" ]; then
                chmod 644 "$file" || true
              fi
            done
          fi
          
          echo "Final wallet contents:"
          ls -la ${{ env.WALLET_DIR }}
          
      - name: Upload wallet artifact
        uses: actions/upload-artifact@v4
        with:
          name: oracle-public-ca-wallet-${{ github.run_id }}
          path: ${{ env.WALLET_DIR }}
          retention-days: 90
          if-no-files-found: error
          
      - name: Upload wallet for release
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: oracle-public-ca-wallet-release
          path: ${{ env.WALLET_DIR }}
          retention-days: 365
