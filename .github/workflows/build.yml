name: Build Oracle Wallet with Public CA Certificates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:
  #schedule:
    # Rebuild monthly to get updated certificates
    #- cron: '0 2 1 * *'

env:
  WALLET_DIR: /tmp/public_wallet
  CERT_DIR: /tmp/certs

defaults:
  run:
    working-directory: /tmp/

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: gvenzl/oracle-xe:18-slim
      options: --user root
    
    permissions:
      contents: read
      actions: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Oracle environment
        run: |
          echo "Setting up Oracle environment..."
          echo "Current user: $(whoami)"
          echo "Current PATH: $PATH"
          
          # Install Java if not present
          echo "Checking for Java..."
          if ! java -version 2>/dev/null; then
            echo "Java not found, attempting to install..."
            # Try to install OpenJDK
            if command -v yum >/dev/null 2>&1; then
              yum install -y java-11-openjdk-headless || echo "Failed to install Java via yum"
            elif command -v apt-get >/dev/null 2>&1; then
              apt-get update && apt-get install -y openjdk-11-jre-headless || echo "Failed to install Java via apt"
            elif command -v microdnf >/dev/null 2>&1; then
              microdnf install -y java-11-openjdk-headless || echo "Failed to install Java via microdnf"
            fi
          fi
          
          # Set up Java environment
          echo "Setting up Java environment..."
          export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
          
          # Try different Java locations
          for java_path in "/usr/lib/jvm/java-11-openjdk-amd64" "/usr/lib/jvm/java-8-openjdk-amd64" "/opt/oracle/product/*/jdk" "/usr/java/latest" "/usr/lib/jvm/default-java" "/usr/lib/jvm/java-11-openjdk" "/usr/lib/jvm/jre-11-openjdk"; do
            if [ -d "$java_path" ]; then
              echo "Found Java installation at: $java_path"
              export JAVA_HOME="$java_path"
              export PATH="$java_path/bin:$PATH"
              break
            fi
          done
          
          echo "JAVA_HOME: $JAVA_HOME"
          if [ -x "$JAVA_HOME/bin/java" ]; then
            echo "Java version:"
            $JAVA_HOME/bin/java -version || echo "Java version check failed"
          else
            echo "Searching for Java..."
            ls -la /usr/lib/jvm/*/bin/java 2>/dev/null || true
            ls -la /opt/*/jdk*/bin/java 2>/dev/null || true
            ls -la /usr/bin/java 2>/dev/null || true
            
            # Try to use system java if JAVA_HOME setup failed
            if command -v java >/dev/null 2>&1; then
              echo "Using system java"
              java -version
              export JAVA_HOME=$(dirname $(dirname $(readlink -f $(command -v java))))
              echo "Detected JAVA_HOME: $JAVA_HOME"
            fi
          fi
          
          # Set Oracle environment variables
          export ORACLE_HOME=/opt/oracle/product/18c/dbhomeXE
          export PATH=$ORACLE_HOME/bin:$JAVA_HOME/bin:$PATH
          export TNS_ADMIN=$ORACLE_HOME/network/admin
          
          # Try different potential Oracle locations
          for oracle_path in "/opt/oracle/product/18c/dbhomeXE" "/u01/app/oracle/product/18.0.0/dbhome_1" "/opt/oracle"; do
            if [ -d "$oracle_path" ]; then
              echo "Found Oracle installation at: $oracle_path"
              export ORACLE_HOME="$oracle_path"
              export PATH="$oracle_path/bin:$JAVA_HOME/bin:$PATH"
              break
            fi
          done
          
          echo "ORACLE_HOME: $ORACLE_HOME"
          echo "PATH: $PATH"
          echo "JAVA_HOME: $JAVA_HOME"
          
          # Check for orapki
          if [ -x "$ORACLE_HOME/bin/orapki" ]; then
            echo "Found orapki at: $ORACLE_HOME/bin/orapki"
            $ORACLE_HOME/bin/orapki help 2>&1 | head -5 || echo "orapki help failed"
          else
            echo "Searching for orapki..."
            for search_path in "/opt" "/u01" "/usr" "/"; do
              echo "Searching in $search_path..."
              ls -la $search_path/*/bin/orapki 2>/dev/null || true
              ls -la $search_path/*/*/bin/orapki 2>/dev/null || true
              ls -la $search_path/*/*/*/bin/orapki 2>/dev/null || true
            done
          fi
          
          # Verify all required tools are available
          echo "Verifying required tools..."
          
          # Check Java
          if command -v java >/dev/null 2>&1; then
            echo "✓ Java found: $(java -version 2>&1 | head -1)"
          else
            echo "✗ Java not found in PATH"
            echo "Current PATH: $PATH"
            echo "JAVA_HOME: $JAVA_HOME"
            exit 1
          fi
          
          # Check orapki
          if command -v orapki >/dev/null 2>&1; then
            echo "✓ orapki found: $(command -v orapki)"
          elif [ -x "$ORACLE_HOME/bin/orapki" ]; then
            echo "✓ orapki found at: $ORACLE_HOME/bin/orapki"
          else
            echo "✗ orapki not found"
            echo "Current PATH: $PATH"
            echo "ORACLE_HOME: $ORACLE_HOME"
            exit 1
          fi
          
          # Save environment for subsequent steps
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          echo "ORACLE_HOME=$ORACLE_HOME" >> $GITHUB_ENV
          echo "PATH=$ORACLE_HOME/bin:$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV
          echo "TNS_ADMIN=$ORACLE_HOME/network/admin" >> $GITHUB_ENV
          
      - name: Setup working directories
        run: |
          echo "Setting up working directories..."
          echo "Current umask: $(umask)"
          
          umask 022
          mkdir -p ${{ env.WALLET_DIR }} ${{ env.CERT_DIR }}
          chmod 755 ${{ env.WALLET_DIR }} ${{ env.CERT_DIR }}
          ls -la /tmp/
          
      - name: Create new Oracle wallet
        run: |
          echo "Creating Oracle wallet at ${{ env.WALLET_DIR }}"
          echo "Oracle environment:"
          echo "ORACLE_HOME: $ORACLE_HOME"
          echo "JAVA_HOME: $JAVA_HOME"
          echo "PATH: $PATH"
          echo "TNS_ADMIN: $TNS_ADMIN"
          
          # Verify Java is available
          if [ -x "$JAVA_HOME/bin/java" ]; then
            echo "Java version:"
            $JAVA_HOME/bin/java -version
          else
            echo "ERROR: Java not found at $JAVA_HOME/bin/java"
            echo "Searching for Java..."
            ls -la /usr/bin/java /usr/lib/jvm/*/bin/java 2>/dev/null || true
            exit 1
          fi
          
          # Check if orapki is available
          if command -v orapki >/dev/null 2>&1; then
            echo "orapki found in PATH"
            orapki help 2>&1 | head -5 || echo "orapki help failed"
          elif [ -x "$ORACLE_HOME/bin/orapki" ]; then
            echo "Using orapki from ORACLE_HOME: $ORACLE_HOME/bin/orapki"
            $ORACLE_HOME/bin/orapki help 2>&1 | head -5 || echo "orapki help failed"
          else
            echo "ERROR: orapki not found"
            echo "Searching for Oracle binaries..."
            ls -la /opt/oracle/*/bin/orapki 2>/dev/null || true
            ls -la /u01/*/oracle/*/bin/orapki 2>/dev/null || true
            exit 1
          fi
          
          # Create wallet using full path if needed
          if command -v orapki >/dev/null 2>&1; then
            orapki_cmd="orapki"
          else
            orapki_cmd="$ORACLE_HOME/bin/orapki"
          fi
          
          if $orapki_cmd wallet create -wallet ${{ env.WALLET_DIR }} -auto_login_only; then
            echo "Wallet created successfully"
            ls -la ${{ env.WALLET_DIR }}
            
            # Save orapki command for subsequent steps
            echo "ORAPKI_CMD=$orapki_cmd" >> $GITHUB_ENV
          else
            echo "ERROR: Failed to create wallet"
            exit 1
          fi
          
      - name: Download certificate bundles
        run: |
          echo "Downloading Amazon RDS global bundle..."
          if curl -fsSL https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem -o ${{ env.CERT_DIR }}/amazon-global-bundle.pem; then
            echo "✅ Amazon global bundle downloaded"
          else
            echo "❌ Failed to download Amazon global bundle"
            exit 1
          fi
          
          echo "Downloading Amazon RDS regional bundles..."
          curl -fsSL https://truststore.pki.rds.amazonaws.com/us-east-1/us-east-1-bundle.pem -o ${{ env.CERT_DIR }}/amazon-us-east-1-bundle.pem || echo "⚠️ Failed to download us-east-1 bundle"
          curl -fsSL https://truststore.pki.rds.amazonaws.com/us-west-2/us-west-2-bundle.pem -o ${{ env.CERT_DIR }}/amazon-us-west-2-bundle.pem || echo "⚠️ Failed to download us-west-2 bundle"
          curl -fsSL https://truststore.pki.rds.amazonaws.com/eu-west-1/eu-west-1-bundle.pem -o ${{ env.CERT_DIR }}/amazon-eu-west-1-bundle.pem || echo "⚠️ Failed to download eu-west-1 bundle"
          
          echo "Copying Mozilla CA bundle..."
          if [ -f "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" ]; then
            cp /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem ${{ env.CERT_DIR }}/mozilla-ca-bundle.pem
            echo "✅ Mozilla CA bundle copied"
          elif [ -f "/etc/ssl/certs/ca-certificates.crt" ]; then
            cp /etc/ssl/certs/ca-certificates.crt ${{ env.CERT_DIR }}/mozilla-ca-bundle.pem
            echo "✅ CA certificates copied from /etc/ssl/certs/"
          elif [ -f "/etc/ssl/certs/ca-bundle.crt" ]; then
            cp /etc/ssl/certs/ca-bundle.crt ${{ env.CERT_DIR }}/mozilla-ca-bundle.pem
            echo "✅ CA certificates copied from /etc/ssl/certs/ca-bundle.crt"
          else
            echo "❌ No CA bundle found at expected locations"
            echo "Searching for CA bundles..."
            ls /etc/ssl/certs/ 2>/dev/null | head -10 || echo "Cannot list /etc/ssl/certs/"
            ls /etc/pki/ 2>/dev/null | head -10 || echo "Cannot list /etc/pki/"
            exit 1
          fi
          
          echo "Downloaded certificate bundles:"
          ls -la ${{ env.CERT_DIR }}
          echo "File sizes:"
          ls -lh ${{ env.CERT_DIR }}/* || echo "Cannot show file sizes"
          
      - name: Validate certificate bundles
        run: |
          echo "Validating certificate bundles..."
          for bundle in ${{ env.CERT_DIR }}/*.pem; do
            echo "Validating $(basename $bundle)..."
            if ! grep -q "BEGIN CERTIFICATE" "$bundle"; then
              echo "ERROR: No certificates found in $bundle"
              exit 1
            fi
            cert_count=$(grep -c "BEGIN CERTIFICATE" "$bundle")
            echo "  Found $cert_count certificates"
          done
          
      - name: Process Amazon global bundle certificates
        run: |
          echo "Processing Amazon global bundle..."
          cd ${{ env.CERT_DIR }}
          
          if [ ! -f "amazon-global-bundle.pem" ]; then
            echo "ERROR: Amazon global bundle not found"
            exit 1
          fi
          
          # Split certificates with error handling
          if csplit amazon-global-bundle.pem '/-----BEGIN CERTIFICATE-----/' '{*}' --prefix=amazon-global- --suffix-format='%03d.pem' --quiet; then
            echo "Successfully split Amazon global bundle"
          else
            echo "ERROR: Failed to split Amazon global bundle"
            echo "Bundle content preview:"
            head -10 amazon-global-bundle.pem
            exit 1
          fi
          
          rm amazon-global-000.pem 2>/dev/null || true
          
          cert_count=0
          failed_count=0
          duplicate_count=0
          for cert in amazon-global-*.pem; do
            if [ -f "$cert" ] && [ -s "$cert" ]; then
              echo "Adding Amazon global certificate: $cert"
              # Capture orapki output to check for specific errors
              if orapki_output=$($ORAPKI_CMD wallet add -wallet ${{ env.WALLET_DIR }} -trusted_cert -cert "$cert" -auto_login_only 2>&1); then
                cert_count=$((cert_count + 1))
                echo "✅ Successfully added certificate $cert"
              else
                if echo "$orapki_output" | grep -q "PKI-04003.*already present"; then
                  duplicate_count=$((duplicate_count + 1))
                  echo "ℹ️ Certificate $cert already exists (skipping)"
                else
                  failed_count=$((failed_count + 1))
                  echo "⚠️ WARNING: Failed to add certificate $cert"
                  echo "Error: $orapki_output"
                fi
              fi
            fi
          done
          echo "Successfully added $cert_count new Amazon global certificates"
          if [ $duplicate_count -gt 0 ]; then
            echo "Skipped $duplicate_count duplicate certificates"
          fi
          if [ $failed_count -gt 0 ]; then
            echo "Failed to add $failed_count certificates"
          fi
          rm amazon-global-*.pem
          
          # Ensure we have at least some certificates (counting new + duplicates as success)
          total_processed=$((cert_count + duplicate_count))
          if [ $total_processed -eq 0 ]; then
            echo "ERROR: No Amazon global certificates were processed successfully"
            exit 1
          fi
          
      - name: Process Amazon regional bundle certificates
        continue-on-error: true
        run: |
          echo "Processing Amazon regional bundles..."
          cd ${{ env.CERT_DIR }}
          
          total_regional_certs=0
          for bundle in amazon-us-east-1-bundle.pem amazon-us-west-2-bundle.pem amazon-eu-west-1-bundle.pem; do
            if [ -f "$bundle" ]; then
              region=$(echo $bundle | sed 's/amazon-\(.*\)-bundle.pem/\1/')
              echo "Processing $region certificates..."
              
              # Check if bundle has certificates
              if ! grep -q "BEGIN CERTIFICATE" "$bundle"; then
                echo "WARNING: No certificates found in $bundle, skipping"
                continue
              fi
              
              if csplit "$bundle" '/-----BEGIN CERTIFICATE-----/' '{*}' --prefix="amazon-${region}-" --suffix-format='%03d.pem' --quiet; then
                rm "amazon-${region}-000.pem" 2>/dev/null || true
                
                cert_count=0
                for cert in amazon-${region}-*.pem; do
                  if [ -f "$cert" ] && [ -s "$cert" ]; then
                    if $ORAPKI_CMD wallet add -wallet ${{ env.WALLET_DIR }} -trusted_cert -cert "$cert" -auto_login_only; then
                      cert_count=$((cert_count + 1))
                    fi
                  fi
                done
                echo "Successfully added $cert_count certificates from $region"
                total_regional_certs=$((total_regional_certs + cert_count))
                rm amazon-${region}-*.pem 2>/dev/null || true
              else
                echo "WARNING: Failed to split $bundle"
              fi
            else
              echo "WARNING: Bundle $bundle not found, skipping"
            fi
          done
          echo "Total regional certificates added: $total_regional_certs"
          
      - name: Process Mozilla CA bundle certificates
        run: |
          echo "Processing Mozilla CA bundle..."
          cd ${{ env.CERT_DIR }}
          
          if [ ! -f "mozilla-ca-bundle.pem" ]; then
            echo "ERROR: Mozilla CA bundle not found"
            exit 1
          fi
          
          # Check bundle content first
          cert_count_in_bundle=$(grep -c "BEGIN CERTIFICATE" mozilla-ca-bundle.pem)
          echo "Found $cert_count_in_bundle certificates in Mozilla bundle"
          
          # Split certificates with error handling
          if csplit mozilla-ca-bundle.pem '/-----BEGIN CERTIFICATE-----/' '{*}' --prefix=mozilla- --suffix-format='%03d.pem' --quiet; then
            echo "Successfully split Mozilla CA bundle"
          else
            echo "ERROR: Failed to split Mozilla CA bundle"
            echo "Bundle content preview:"
            head -10 mozilla-ca-bundle.pem
            exit 1
          fi
          
          rm mozilla-000.pem 2>/dev/null || true
          
          cert_count=0
          failed_count=0
          duplicate_count=0
          for cert in mozilla-*.pem; do
            if [ -f "$cert" ] && [ -s "$cert" ]; then
              # Capture orapki output to check for specific errors
              if orapki_output=$($ORAPKI_CMD wallet add -wallet ${{ env.WALLET_DIR }} -trusted_cert -cert "$cert" -auto_login_only 2>&1); then
                cert_count=$((cert_count + 1))
                # Show progress every 50 certificates
                if [ $((cert_count % 50)) -eq 0 ]; then
                  echo "Added $cert_count Mozilla certificates so far..."
                fi
              else
                if echo "$orapki_output" | grep -q "PKI-04003.*already present"; then
                  duplicate_count=$((duplicate_count + 1))
                else
                  failed_count=$((failed_count + 1))
                fi
              fi
            fi
          done
          echo "Successfully added $cert_count new Mozilla CA certificates"
          if [ $duplicate_count -gt 0 ]; then
            echo "Skipped $duplicate_count duplicate certificates"
          fi
          if [ $failed_count -gt 0 ]; then
            echo "Failed to add $failed_count certificates"
          fi
          rm mozilla-*.pem
          
          # Ensure we have at least some certificates (counting new + duplicates as success)
          total_processed=$((cert_count + duplicate_count))
          if [ $total_processed -eq 0 ]; then
            echo "ERROR: No Mozilla CA certificates were processed successfully"
            exit 1
          fi
          
      - name: Validate wallet contents
        run: |
          echo "Validating wallet contents..."
          if [ ! -f "${{ env.WALLET_DIR }}/cwallet.sso" ]; then
            echo "ERROR: cwallet.sso not found"
            echo "Wallet directory contents:"
            ls -la ${{ env.WALLET_DIR }}
            exit 1
          fi
          
          echo "Wallet files:"
          ls -la ${{ env.WALLET_DIR }}
          
          echo "Listing trusted certificates in wallet..."
          if wallet_display=$($ORAPKI_CMD wallet display -wallet ${{ env.WALLET_DIR }} 2>&1); then
            echo "$wallet_display" | head -20
            
            # Count certificates
            cert_count=$(echo "$wallet_display" | grep -c "Trusted Certificate" || echo "0")
            echo "Total trusted certificates in wallet: $cert_count"
            
            if [ "$cert_count" -lt 50 ]; then
              echo "WARNING: Expected more certificates (found $cert_count)"
              echo "This may indicate certificate processing issues"
            elif [ "$cert_count" -lt 100 ]; then
              echo "INFO: Found $cert_count certificates (acceptable but below expected ~150+)"
            else
              echo "SUCCESS: Found $cert_count certificates"
            fi
          else
            echo "ERROR: Could not display wallet contents"
            echo "orapki wallet display output: $wallet_display"
            exit 1
          fi
          
      - name: Create wallet metadata
        run: |
          # Set proper permissions before creating metadata
          chmod 644 ${{ env.WALLET_DIR }}/*.sso ${{ env.WALLET_DIR }}/*.p12 2>/dev/null || true
          
          cat > ${{ env.WALLET_DIR }}/wallet-info.txt << EOF
          Oracle Wallet Build Information
          ===============================
          Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Build ID: ${{ github.run_id }}
          Git SHA: ${{ github.sha }}
          
          Certificate Sources:
          - Amazon RDS Global Bundle
          - Amazon RDS Regional Bundles (us-east-1, us-west-2, eu-west-1)
          - Mozilla CA Bundle
          
          Total Certificates: $($ORAPKI_CMD wallet display -wallet ${{ env.WALLET_DIR }} | grep -c "Trusted Certificate" || echo "0")
          
          Usage:
          Copy the contents of this directory to your Oracle client configuration.
          Update your sqlnet.ora file to point to the wallet location.
          
          Compatible with Oracle 12c and later versions.
          EOF
          
          chmod 644 ${{ env.WALLET_DIR }}/wallet-info.txt
          echo "Wallet metadata created:"
          cat ${{ env.WALLET_DIR }}/wallet-info.txt
          
      - name: Prepare wallet for upload
        run: |
          echo "Setting final permissions for wallet files..."
          # Use basic commands instead of find (which may not be available)
          chmod 644 ${{ env.WALLET_DIR }}/* 2>/dev/null || true
          chmod 755 ${{ env.WALLET_DIR }} 2>/dev/null || true
          
          # Alternative approach using ls and xargs if available
          if command -v ls >/dev/null 2>&1; then
            for file in ${{ env.WALLET_DIR }}/*; do
              if [ -f "$file" ]; then
                chmod 644 "$file" || true
              fi
            done
          fi
          
          echo "Final wallet contents:"
          ls -la ${{ env.WALLET_DIR }}
          
      - name: Upload wallet artifact
        uses: actions/upload-artifact@v4
        with:
          name: oracle-public-ca-wallet-${{ github.run_id }}
          path: ${{ env.WALLET_DIR }}
          retention-days: 90
          if-no-files-found: error
          
      - name: Upload wallet for release
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: oracle-public-ca-wallet-release
          path: ${{ env.WALLET_DIR }}
          retention-days: 365
